<?php

namespace App\Repository;

use League\OAuth2\Server\Repositories\ClientRepositoryInterface;
use App\Entity\Client;

class ClientRepository implements ClientRepositoryInterface
{
    /**
     * Determine if the given client can handle the given grant type.
     */
    public function handlesGrant($client, $grantType)
    {
        return $client->getGrants();
    }

    /**
     * Get an active client by the given ID.
     */
    public function findActive($clientIdentifier)
    {
        return $this->getEntityManager()
                    ->getRepository(Client::class)
                    ->findOneByIdentifier($clientIdentifier);
    }

    /**
     * {@inheritdoc}
     */
    public function getClientEntity(
      $clientIdentifier,
      $grantType,
      $clientSecret = null,
      $mustValidateSecret = true)
    {
        // First, we will verify that the client exists and is authorized to create personal
        // access tokens. Generally personal access tokens are only generated by the user
        // from the main interface. We'll only let certain clients generate the tokens.
        $clientRecord = $this->findActive($clientIdentifier);

        if (! $clientRecord || ! $this->handlesGrant($clientRecord, $grantType)) {
            return;
        }

        // Once we have an existing client record we will create this actual client instance
        // and verify the secret if necessary. If the secret is valid we will be ready to
        // return this client instance back out to the consuming methods and finish up.

        if ($mustValidateSecret &&
            ! hash_equals($clientRecord->secret, (string) $clientSecret)) {
            return;
        }

        $client = new Client();
        $client->setIdentifier($clientIdentifier);
        $client->setName($clientRecord->getName());
        $client->setRedirectUri($clientRecord->getRedirectUri());

        return $client;
    }
}
